{
  "name": "Banking Case_Risk assessment_Fraud Detection",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "transaction-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "4d44d8a0-ad01-49c6-8eba-66b88f4f05ec",
      "name": "Transaction Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -880,
        112
      ],
      "webhookId": "transaction-monitor"
    },
    {
      "parameters": {
        "jsCode": "// Sample transaction data generator for demo\nconst sampleTransactions = [\n  {\n    \"transaction_id\": \"TXN001\",\n    \"user_id\": \"USER123\",\n    \"amount\": 50000,\n    \"payment_method\": \"UPI\",\n    \"merchant_id\": \"MERCH001\",\n    \"location\": \"Mumbai, Maharashtra\",\n    \"timestamp\": new Date().toISOString(),\n    \"device_id\": \"DEV001\",\n    \"ip_address\": \"192.168.1.100\",\n    \"upi_id\": \"user123@paytm\",\n    \"merchant_category\": \"Electronics\"\n  },\n  {\n    \"transaction_id\": \"TXN002\",\n    \"user_id\": \"USER123\", \n    \"amount\": 45000,\n    \"payment_method\": \"UPI\",\n    \"merchant_id\": \"MERCH002\",\n    \"location\": \"Delhi, NCR\",\n    \"timestamp\": new Date(Date.now() - 300000).toISOString(),\n    \"device_id\": \"DEV002\",\n    \"ip_address\": \"10.0.0.50\",\n    \"upi_id\": \"user123@paytm\",\n    \"merchant_category\": \"Jewelry\"\n  },\n  {\n    \"transaction_id\": \"TXN003\",\n    \"user_id\": \"USER456\",\n    \"amount\": 2000,\n    \"payment_method\": \"Card\",\n    \"merchant_id\": \"MERCH003\",\n    \"location\": \"Bangalore, Karnataka\",\n    \"timestamp\": new Date().toISOString(),\n    \"device_id\": \"DEV003\",\n    \"ip_address\": \"172.16.0.10\",\n    \"card_last_4\": \"1234\",\n    \"merchant_category\": \"Food\"\n  }\n];\n\nconst transaction = $input.all().length > 0 ? $input.all()[0].json : sampleTransactions[Math.floor(Math.random() * sampleTransactions.length)];\n\nreturn [{\n  json: transaction\n}];"
      },
      "id": "878182a4-be55-4454-bb46-5ebdacff467b",
      "name": "Transaction Processor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Advanced fraud detection logic for Indian payments - FIXED for webhook input\nconst webhookData = $input.all()[0].json;\nconst transaction = webhookData.body; // Extract transaction from body\n\nconsole.log('Received transaction:', JSON.stringify(transaction, null, 2));\n\nconst riskFactors = [];\nlet riskScore = 0;\nconst alerts = [];\n\nconst HIGH_AMOUNT_THRESHOLD = 25000;\nconst VERY_HIGH_AMOUNT_THRESHOLD = 100000;\n\nif (transaction.amount > VERY_HIGH_AMOUNT_THRESHOLD) {\n  riskScore += 40;\n  riskFactors.push('Very high transaction amount');\n  alerts.push({\n    type: 'HIGH_AMOUNT',\n    severity: 'HIGH',\n    message: `Transaction amount ₹${transaction.amount} exceeds ₹${VERY_HIGH_AMOUNT_THRESHOLD} threshold`\n  });\n} else if (transaction.amount > HIGH_AMOUNT_THRESHOLD) {\n  riskScore += 20;\n  riskFactors.push('High transaction amount');\n  alerts.push({\n    type: 'MEDIUM_AMOUNT',\n    severity: 'MEDIUM', \n    message: `Transaction amount ₹${transaction.amount} is above normal threshold`\n  });\n}\n\nconst transactionHour = new Date(transaction.timestamp).getHours();\nif (transactionHour < 6 || transactionHour > 23) {\n  riskScore += 15;\n  riskFactors.push('Off-hours transaction');\n  alerts.push({\n    type: 'OFF_HOURS',\n    severity: 'MEDIUM',\n    message: `Transaction at ${transactionHour}:00 is outside normal hours`\n  });\n}\n\nif (transaction.payment_method === 'UPI') {\n  if (!transaction.upi_id || !transaction.upi_id.includes('@')) {\n    riskScore += 25;\n    riskFactors.push('Invalid UPI ID format');\n    alerts.push({\n      type: 'INVALID_UPI',\n      severity: 'HIGH',\n      message: 'UPI ID format appears invalid'\n    });\n  }\n  \n  if (transaction.user_id === 'USER123') {\n    riskScore += 30;\n    riskFactors.push('High transaction velocity');\n    alerts.push({\n      type: 'HIGH_VELOCITY',\n      severity: 'HIGH',\n      message: 'Multiple high-value transactions detected in short timeframe'\n    });\n  }\n}\n\nif (transaction.device_id && transaction.user_id === 'USER123' && transaction.device_id !== 'DEV001') {\n  riskScore += 20;\n  riskFactors.push('New device used');\n  alerts.push({\n    type: 'NEW_DEVICE',\n    severity: 'MEDIUM',\n    message: `Transaction from unrecognized device: ${transaction.device_id}`\n  });\n}\n\nif (transaction.location && transaction.location.includes('Delhi') && transaction.user_id === 'USER123') {\n  riskScore += 25;\n  riskFactors.push('Unusual location for user');\n  alerts.push({\n    type: 'LOCATION_ANOMALY',\n    severity: 'HIGH',\n    message: 'Transaction from unusual geographic location for this user'\n  });\n}\n\nconst highRiskCategories = ['Jewelry', 'Electronics', 'Cryptocurrency', 'Gaming'];\nif (highRiskCategories.includes(transaction.merchant_category)) {\n  riskScore += 15;\n  riskFactors.push('High-risk merchant category');\n  alerts.push({\n    type: 'HIGH_RISK_MERCHANT',\n    severity: 'MEDIUM',\n    message: `Transaction in high-risk category: ${transaction.merchant_category}`\n  });\n}\n\nif (transaction.amount % 1000 === 0 && transaction.amount >= 10000) {\n  riskScore += 10;\n  riskFactors.push('Round number transaction');\n}\n\nlet riskLevel = 'LOW';\nif (riskScore >= 60) {\n  riskLevel = 'HIGH';\n} else if (riskScore >= 30) {\n  riskLevel = 'MEDIUM';\n}\n\nconst analysis = {\n  // PRESERVE ORIGINAL TRANSACTION DATA\n  transaction_id: transaction.transaction_id,\n  user_id: transaction.user_id,\n  amount: transaction.amount,\n  payment_method: transaction.payment_method,\n  timestamp: transaction.timestamp,\n  location: transaction.location,\n  device_id: transaction.device_id,\n  merchant_category: transaction.merchant_category,\n  ip_address: transaction.ip_address,\n  upi_id: transaction.upi_id,\n  merchant_id: transaction.merchant_id,\n  \n  // ADD RISK ANALYSIS\n  risk_score: riskScore,\n  risk_level: riskLevel,\n  risk_factors: riskFactors,\n  alerts: alerts,\n  requires_manual_review: riskScore >= 50,\n  recommended_action: riskScore >= 60 ? 'BLOCK_TRANSACTION' : \n                     riskScore >= 30 ? 'REQUEST_OTP_VERIFICATION' : 'ALLOW',\n  regulatory_flags: {\n    aml_concern: riskScore >= 70,\n    rbi_reporting_required: transaction.amount >= 50000,\n    kyc_reverification_needed: riskScore >= 60\n  },\n  analysis_timestamp: new Date().toISOString()\n};\n\nconsole.log('Risk analysis completed:', JSON.stringify(analysis, null, 2));\n\nreturn [{\n  json: analysis\n}];"
      },
      "id": "d8118598-acaf-498a-a94c-e6e52c47b7e7",
      "name": "Fraud Detection Engine",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// High Risk Alert Handler\nconst analysis = $input.all()[0].json;\n\nconst alert = {\n  alert_id: `ALERT_${Date.now()}`,\n  transaction_id: analysis.transaction_id,\n  alert_type: 'FRAUD_SUSPICION',\n  severity: 'HIGH',\n  user_id: analysis.user_id,\n  amount: analysis.amount,\n  risk_score: analysis.risk_score,\n  risk_factors: analysis.risk_factors,\n  alerts: analysis.alerts,\n  recommended_action: analysis.recommended_action,\n  requires_immediate_attention: true,\n  escalation_required: analysis.risk_score >= 70,\n  created_at: new Date().toISOString(),\n  \n  rbi_reporting: analysis.regulatory_flags.rbi_reporting_required,\n  aml_flag: analysis.regulatory_flags.aml_concern,\n  \n  message: `HIGH RISK: Transaction of ₹${analysis.amount} by user ${analysis.user_id} flagged with risk score ${analysis.risk_score}. Factors: ${analysis.risk_factors.join(', ')}`\n};\n\nreturn [{\n  json: alert\n}];"
      },
      "id": "2442af67-8156-4f03-a07e-6501d37cf240",
      "name": "High Risk Alert",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Medium/Low Risk Handler\nconst analysis = $input.all()[0].json;\n\nconst response = {\n  transaction_id: analysis.transaction_id,\n  status: analysis.recommended_action,\n  risk_level: analysis.risk_level,\n  risk_score: analysis.risk_score,\n  message: analysis.risk_level === 'MEDIUM' ? \n    'Additional verification required' : \n    'Transaction approved',\n  \n  gateway_response: {\n    allow_transaction: analysis.recommended_action === 'ALLOW',\n    require_otp: analysis.recommended_action === 'REQUEST_OTP_VERIFICATION',\n    risk_level: analysis.risk_level\n  },\n  \n  processed_at: new Date().toISOString()\n};\n\nreturn [{\n  json: response\n}];"
      },
      "id": "43308b4f-c12d-4e96-9406-5d8f5581abe1",
      "name": "Normal Risk Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        208
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "d9a4ed94-a9b8-49f5-920b-0e8ee7eeb78c",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        224,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format Security Alert for Display\nconst alert = $input.all()[0].json;\n\nconst formattedAlert = {\n  alert_id: alert.alert_id,\n  transaction_id: alert.transaction_id,\n  user_id: alert.user_id,\n  amount: alert.amount,\n  risk_score: alert.risk_score,\n  risk_level: alert.risk_level || 'HIGH',\n  message: alert.message,\n  risk_factors: alert.risk_factors,\n  recommended_action: alert.recommended_action,\n  requires_immediate_attention: alert.requires_immediate_attention,\n  timestamp: alert.created_at || new Date().toISOString(),\n  \n  // For display purposes\n  display_message: `🚨 SECURITY ALERT: ${alert.message}`,\n  display_summary: `User: ${alert.user_id} | Amount: ₹${alert.amount} | Score: ${alert.risk_score}`\n};\n\nconsole.log('Security Alert:', formattedAlert);\n\nreturn [{\n  json: formattedAlert\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        0
      ],
      "id": "2d2335c2-f08d-4920-bddc-938154988a47",
      "name": "Code - notify security"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8b904c61-6edb-441b-9cbb-2026a6d0cb99",
              "leftValue": "={{ $json.risk_level }}",
              "rightValue": "HIGH",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -240,
        112
      ],
      "id": "cd9d03a5-2e7b-4445-a4b0-802b970faf97",
      "name": "If"
    }
  ],
  "pinData": {},
  "connections": {
    "Transaction Webhook": {
      "main": [
        [
          {
            "node": "Transaction Processor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transaction Processor": {
      "main": [
        [
          {
            "node": "Fraud Detection Engine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fraud Detection Engine": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Risk Alert": {
      "main": [
        [
          {
            "node": "Code - notify security",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normal Risk Handler": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "High Risk Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Normal Risk Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c4bd5e8e-ff1d-48a3-84c8-2d6dee5a3c29",
  "meta": {
    "instanceId": "c51495c471c573104351d94e8edb118acd1e3f30ad3f94b6f8748425fe7f801d"
  },
  "id": "N6EWv119bttYAfNr",
  "tags": []
}